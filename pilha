{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pilha\n",
    "\n",
    "Este arquivo contém a implementação de uma pilha dinâmica homogênea. Cada elemento da pilha possui um ponteiro genérico para o dado que será armazenado no nodo e um ponteiro para o próximo nodo na pilha.\n",
    "\n",
    "O comando “%%file” é utilizado pelo python para criar o arquivo .c em sua máquina local (no diretório onde este notebook está salvo). O arquivo criado será nomeado de acordo com o identificador que aparece após o comando “%%file”."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Especificação do Heap:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing Nodo.h\n"
     ]
    }
   ],
   "source": [
    "%%file pilha.c\n",
    "\n",
    "#include <stdio.h>\n",
    "#include <stdlib.h>\n",
    "\n",
    "// Estrutura do nodo\n",
    "typedef struct nodo {\n",
    "    void *dado;             // ponteiro genérico para o dado armazenado no nodo.\n",
    "    struct nodo* proximo;   // ponteiro para o próximo nodo.\n",
    "} Nodo;\n",
    "\n",
    "// Estrutura da pilha\n",
    "typedef struct {\n",
    "    Nodo* topo;\n",
    "} Pilha;\n",
    "\n",
    "// Função para inicializar a pilha.\n",
    "Pilha * criarPilha() {\n",
    "    Pilha *pilha = (Pilha *) malloc(sizeof(Pilha));\n",
    "    pilha->topo = NULL;\n",
    "    return pilha;\n",
    "}\n",
    "\n",
    "// Função para destruir uma pilha.\n",
    "void destruirPilha(Pilha *pilha) {\n",
    "    while(pilha->topo != NULL){\n",
    "        Nodo *aux = pilha->topo;\n",
    "        pilha->topo = pilha->topo->proximo;\n",
    "        free(aux);\n",
    "    }\n",
    "    free(pilha);\n",
    "}\n",
    "\n",
    "// Função para verificar se a pilha está vazia.\n",
    "int estaVazia(Pilha* pilha) {\n",
    "    return pilha->topo == NULL;\n",
    "}\n",
    "\n",
    "// Função para empilhar um elemento (dado).\n",
    "void push(Pilha* pilha, void *dado) {\n",
    "    Nodo *novoNodo = (Nodo*) malloc(sizeof(Nodo));\n",
    "    \n",
    "    if (novoNodo == NULL) {\n",
    "        printf(\"Falha ao alocar memória!\\n\");\n",
    "    }\n",
    "    else {\n",
    "        novoNodo->dado = dado;\n",
    "        novoNodo->proximo = pilha->topo;\n",
    "        pilha->topo = novoNodo;   \n",
    "    }\n",
    "}\n",
    "\n",
    "// Função para desempilhar um elemento.\n",
    "void * pop(Pilha* pilha) {\n",
    "    if (estaVazia(pilha)) {\n",
    "        return NULL;\n",
    "    }\n",
    "    void * dado = pilha->topo->dado;\n",
    "    Nodo* aux = pilha->topo;\n",
    "    pilha->topo = pilha->topo->proximo;\n",
    "    free(aux);\n",
    "    return dado;\n",
    "}\n",
    "\n",
    "// Função para obter o elemento no topo da pilha sem removê-lo\n",
    "void * peek(Pilha* pilha) {\n",
    "    if (estaVazia(pilha)) {\n",
    "        return NULL;\n",
    "    }\n",
    "    return pilha->topo->dado;\n",
    "}\n",
    "\n",
    "// Exemplo de uso da pilha\n",
    "int main() {\n",
    "    Pilha *pilha = criarPilha();\n",
    "    int a = 10, b = 20, c = 30;\n",
    "\n",
    "    // Empilhando:\n",
    "    push(pilha, &a);\n",
    "    push(pilha, &b);\n",
    "    push(pilha, &c);\n",
    "\n",
    "    // Desempilhando: \n",
    "    while (peek(pilha) != NULL) {\n",
    "        printf(\"%d \", *(int *) pop(pilha));\n",
    "    }\n",
    "    printf(\"\\n\");\n",
    "    destruirPilha(pilha);    \n",
    "    return 0;\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para compilar, você pode usar o seguinte comandos (Linux):\n",
    "- COMPILAÇÃO: gcc pilha.c -o exe\n",
    "- EXECUÇÃO: ./exe"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
